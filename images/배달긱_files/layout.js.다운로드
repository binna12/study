Kakao.init('c385ae4523e4bc66a45f9adb28ebf41c');

Vue.options.delimiters = ['<%=', '%>'];
let vueBus = new Vue();
let scrollYPosition = 0;

$.ajaxSetup({
	error : function(request, status, error) {
		console.error('code:'+request.status+'\n'+'message:'+request.responseText+'\n'+'error:'+error);
		vueBus.$emit('alert', {'msg':'데이터를 요청하던 중 에러가 발생하였습니다.\n잠시 후 시도해주세요.'});
	}
});


// 숫자 타입에서 쓸 수 있도록 commaFormat() 함수 추가
Number.prototype.commaFormat = function(){
	if(this==0) return 0;

	let reg = /(^[+-]?\d+)(\d{3})/;
	let n = (this + '');

	while (reg.test(n)) n = n.replace(reg, '$1' + ',' + '$2');

	return n;
};

// 문자열 타입에서 쓸 수 있도록 commaFormat() 함수 추가
String.prototype.commaFormat = function(){
	let num = parseFloat(this);
	if( isNaN(num) ) return "";

	return num.commaFormat();
};

// 문자열을 padString을 왼쪽에 붙여서 지정한 길이로 만드는 함수
String.prototype.lpad = function (_length, _padStr) {
	let s = this, i = s.length;
	while (i++ < _length) {
		s = _padStr + s;
	}
	return s;
};

function parseGETQueryString() {
	let parseUrls = document.documentURI.split('?');
	let rtnObj = {};
	if(parseUrls.length == 2) {
		let queryString = parseUrls[1].split('&');
		for (let val of queryString) {
			let datas = val.split('=');
			rtnObj[datas[0]] = datas[1];
		}
	}

	return rtnObj;
}

function overFlowChange() {
	const $body = $('body');
	const overflowState = $body.css('overflow');
	let overflow = 'hidden';
	if (overflowState == 'visible') {
		scrollYPosition = window.scrollY;
	} else {
		$('html, body').animate({scrollTop: scrollYPosition}, 10);
		overflow = 'visible';
	}
	$body.css('overflow', overflow);
}

// obj string 으로 나열 option 정열할때 사용
function parseObjStrings(_optionObj){
	if (typeof  _optionObj === "undefined" ) {
		return  false;
	}
	if (Object.keys(_optionObj).length > 1) {
		let options = "옵션 -";
		for (let key of Object.keys(_optionObj)) {
			if (options != "옵션 -") {
				options += ',';
			}
			options += ` ${key}[ ${_optionObj[key]}]`;
		}
		return options;
	}
}

function copyToClipboard(str) {
	const el = document.createElement('textarea');
	el.value = str;
	document.body.appendChild(el);
	if (navigator.userAgent.indexOf('iPhone') > -1) {
		let range = document.createRange();
		range.selectNodeContents(el);
		el.setSelectionRange(0, 999999);
	} else {
		el.select();
	}

	document.execCommand('copy');
	document.body.removeChild(el);
}

/**
 * 버전 비교
 *
 * @param left
 * @param right
 * @returns {boolean|number} 1: left가 더 큼, -1: right 가 큼, 0: 같음, false: 잘못된 데이터
 */
function versionCompare(left, right) {
	if (typeof left + typeof right != 'stringstring')
		return false;

	let a = left.split('.')
		,   b = right.split('.')
		,   i = 0, len = Math.max(a.length, b.length);

	for (; i < len; i++) {
		if ((a[i] && !b[i] && parseInt(a[i]) > 0) || (parseInt(a[i]) > parseInt(b[i]))) {
			return 1;
		} else if ((b[i] && !a[i] && parseInt(b[i]) > 0) || (parseInt(a[i]) < parseInt(b[i]))) {
			return -1;
		}
	}

	return 0;
}

const debounce = (func, delay) => {
	let inDebounce;
	return function() {
		const context = this;
		const args = arguments;
		clearTimeout(inDebounce);
		inDebounce = setTimeout(() => func.apply(context, args), delay)
	}
};

const throttle = (func, limit) => {
	let lastFunc;
	let lastRan;
	return function() {
		const context = this;
		const args = arguments;
		if (!lastRan) {
			func.apply(context, args);
			lastRan = Date.now()
		} else {
			clearTimeout(lastFunc);
			lastFunc = setTimeout(function() {
				if ((Date.now() - lastRan) >= limit) {
					func.apply(context, args);
					lastRan = Date.now();
				}
			}, limit - (Date.now() - lastRan));
		}
	}
};

const intersectionObserverFactory = func => {
	if(typeof func !== 'function') return alert('콜백함수가 없습니다');

	return new IntersectionObserver(entries => {
		entries.forEach(entry => {
			if (entry.isIntersecting) {
				func();
			}
		});
	}, { threshold: 0.9 });
};

// input id 이메일 대문자 변경된 부분 수정
let inputEmail = document.querySelectorAll('input[type=email]');
Array.prototype.forEach.call(inputEmail, function(elem) {
	elem.setAttribute('autocapitalize','off');
});


//textAreas 라인 갱신
let textAreas = document.getElementsByTagName('textarea');
Array.prototype.forEach.call(textAreas, function(elem) {
	elem.placeholder = elem.placeholder.replace(/\\n/g, '\n');
});
//https://stackoverflow.com/questions/7189223/can-you-have-multiline-html5-placeholder-text-in-a-textarea/8843665

// vs to px
const vwTOpx = function (value) {
	let w = window,
		d = document,
		e = d.documentElement,
		g = d.getElementsByTagName('body')[0],
		x = w.innerWidth || e.clientWidth || g.clientWidth;
	// y = w.innerHeight|| e.clientHeight|| g.clientHeight;
	return (x*value)/100;
};